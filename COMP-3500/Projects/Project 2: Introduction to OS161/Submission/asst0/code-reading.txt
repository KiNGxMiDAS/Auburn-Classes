(1). Which register number is used for the stack pointer (sp) in OS/161? 
>>> #define sp $29 
--> from kern/arch/mips/include/asmdefs.h <<<



(2). What bus/busses does OS/161 support?
>>> LAMEbus 
--> from kern/arch/mips/include/bus.h <<<



(3). What is the difference between splhigh and spl0? 
>>> splhigh() sets set priority level or spl to the highighest value, disabling all interrupts, while spl0() sets spl to 0, enabling all interrupts
--> from kern/arch/mips/include/spl.h <<<



(4). Why do we use typedefs like u_int32_t instead of simply saying "int"? 
>>> it's much easier to access globals in assembly than to trying to set up a mechanism for converting C structure offsets to symbols that the seembler can make use of, although the latter is possible ... also u_int32_t allows us to have a constant size on all machines 
--> from kern/arch/mips/include/types.h <<<



(5). What does splx return? 
>>> returns the old interrupt state
--> from kern/arch/mips/mips/spl.c <<<



(6). What is the highest interrupt level? 
>>> #define SPL_HIGH 15
--> from kern/arch/mips/include/spl.h <<<



(7). How frequently are hardclock interrupts generated?
>>> #define HZ 100 e.g., 100 times a second
--> from kern/include/clock.h  <<<



(8). What functions comprise the standard interface to a VFS device?
>>> d_open, d_close, d_io, d_ioctl
--> from kern/include/dev.h <<<



(9). How many characters are allowed in a volume name?
>>> #define SFS_VOLNAME_SIZE 32
--> from kern/include/kern/sfs.h <<<



(10). How many direct blocks does an SFS file have?
>>> 15 is the # of direct blocks in inode, and 128 is the # of indirect blocks per indirect block <<<



(11). What is the standard interface to a file system (i.e., what functions must you implement to implement a new file system)?
>>> fs_sync, fs_getvolname, fs_getroot, fs_umount
--> from kern/include/fs.h <<<



(12). What function puts a thread to sleep?
>>> void thread_sleep(const void *addr) 
--> from kern/include/thread.h <<<



(13). How large are OS/161 pids?
>>> typedef int32_t pid_t; /* Process ID */ ---> 32 bits / 4 bytes 
--> from kern/include/kern/types.h <<<



(14). What operations can you do on a vnode?
>>> open, close, reclaim, read, readlink, getdirentry,
write, ioctl, stat, gettype, tryseek, fsync, mmap,
truncate, namefile, creat, symlink, mkdir, link,
remove, rmdir, rename, lookup, lookparent
--> from kern/include/vnode.h <<<



(15). What is the maximum path length in OS/161?
>>> /* Longest full path name */
#define PATH_MAX 1024
--> from kern/include/kern/limits.h <<<



(16). What is the system call number for a reboot?
>>> #define SYS_reboot 8       /* Reboot system */
--> from kern/include/kern/callno.h <<<



(17). Where is STDIN_FILENO defined?
>>> #define STDIN_FILENO 0       /* Standard input */
--> from kern/include/kern/unistd.h <<<



(18). Is it OK to initialize the thread system before the scheduler? Why or why not?
>>> Yes. The scheduler bootstrap just creates the run queue, and
the thread bootstrap just initializes the first thread. <<<



(19). What is a zombie?
>>> Zombies are threads/processes that have exited but have not been fully deleted yet.
--> from kern/thread/thread.c <<



(20). How large is the initial run queue?
>>> runqueue = q_create(32);
--> from kern/thread/scheduler.c <<<



(21). What does a device name in OS/161 look like?
>>> The name of a device is always device:, such as lhd0:
--> from kern/fs/vfs/device.c <<<



(22). What does a raw device name in OS/161 look like?
>>> The name with raw appended, such as lhd0raw:
--> from kern/fs/vfs/vfslist.c <<<


(23). What lock protects the vnode reference count?
>>> vn_countlock 
--> from kern/fs/vfs/vnode.c <<<



(24). What device types are currently supported?
>>> Block & character devices
-->from kern/fs/vfs/device.c <<<



