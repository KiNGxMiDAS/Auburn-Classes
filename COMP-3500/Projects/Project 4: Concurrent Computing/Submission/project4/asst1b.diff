diff --git a/kern/asst1/catsem.c b/kern/asst1/catsem.c
index dcb257b..bd202b7 100644
--- a/kern/asst1/catsem.c
+++ b/kern/asst1/catsem.c
@@ -13,13 +13,12 @@
  * Includes
  *
  */
-
 #include <types.h>
 #include <lib.h>
+#include <synch.h>
 #include <test.h>
 #include <thread.h>
 
-
 /*
  * 
  * Constants
@@ -27,30 +26,135 @@
  */
 
 /*
- * Number of food bowls.
+ * Boolean data type
  */
+typedef int bool;
+#define TRUE 1
+#define FALSE 0
 
+/*
+ * Number of food bowls.
+ */
 #define NFOODBOWLS 2
 
 /*
- * Number of cats.
+ * Number of animals total.
  */
+#define NANIMALS 8
 
+/*
+ * Number of cats.
+ */
 #define NCATS 6
 
 /*
  * Number of mice.
  */
-
 #define NMICE 2
 
 
+//----------GLOBAL DECLARATIONS------------------------------------------------------------
+
+/*
+ * Semaphores (6)
+ */
+struct semaphore *dish_mutex = 0;
+
+/*
+ * Counters
+ */
+
+// keeps tracking of the number of currently waiting in the queue(no. in cats_queue) and the cats who're eating
+// So basically keeps track of the total number of cats
+int cat_wait_count[6] = {0,0,0,0,0,0};
+int mice_wait_count[2] = {0,0,0,0,0,0};
+int dish1 = 0;
+int dish2 = 0;
+
+
 /*
  * 
  * Function Definitions
  * 
  */
 
+/*
+ * init()
+ *
+ * Arguments:
+ * 	void: ...
+ *
+ * Returns:
+ * 	nothing.
+ *
+ * Notes:
+ * 	.......
+ *
+ */
+static
+void
+init(void) {
+	
+	// semaphore dish_mutex = 1 ... this is a lock which will always be initialised to TRUE (1)
+	// this will dynamically create the memory resources to hold the data
+	dish_mutex = sem_create("Dish Mutex", 2);
+	if ( dish_mutex == NULL ) {
+		panic("Out of memory !!!\n");   // panic() is "write then abort", while assert() is "test and if it's false, write then abort"
+	}
+
+}
+
+
+/*
+ * wait_until_all_done()
+ *
+ * Arguments:
+ * 	void: ...
+ *
+ * Returns:
+ * 	nothing.
+ *
+ * Notes:
+ * 	Wait until all animals are done eating
+ *
+ */
+static
+void
+wait_until_all_done(const char *animal, int count, int dish, int itr){
+	//----wait until all animals are done eating---------------------------
+	kprintf("%s: %d starts eating: Dish %d, Iteration %d\n", animal, count, dish, itr);
+    	clocksleep(1);
+    	kprintf("%s: %d ends eating: Dish %d, Iteration %d\n", animal, count, dish, itr);
+}
+
+/*
+ * switch_turn()
+ *
+ * Arguments:
+ * 	void: ...
+ *
+ * Returns:
+ * 	nothing.
+ *
+ * Notes:
+ * 	.......
+ *
+ */
+// static
+// void
+// switch_turn(myname, my_first_cat_eat, my_another_cat_eat) {
+
+// 	volatile bool first_cat_eat = FALSE;   //
+
+// 	P(cats_queue);  /* first cat in while the others wait */
+// 	if (no_cat_eat == TRUE) {   
+// 		no_cat_eat = FALSE;
+// 		first_cat_eat = TRUE;  /*first_cat_eat:local */
+// 	} else {
+// 		first_cat_eat = FALSE;
+// 	}
+// }
+
 
 /*
  * catsem()
@@ -66,20 +170,39 @@
  *      Write and comment this function using semaphores.
  *
  */
-
 static
 void
 catsem(void * unusedpointer, 
-       unsigned long catnumber)
+       unsigned long catnumber) 
 {
+
         /*
          * Avoid unused variable warnings.
          */
 
         (void) unusedpointer;
-        (void) catnumber;
+
+	P(dish_mutex);
+	while (cat_wait_count[catnumber] < 4) {
+		if (dish1 == 0 && dish2 != 2) {
+			dish1 = 1;
+			wait_until_all_done("Tom", catnumber, 1, cat_wait_count[catnumber]); 
+			dish1 = 0;
+			
+			cat_wait_count[catnumber] = cat_wait_count[catnumber] + 1;
+		} else if (dish2 == 0 && dish1 != 2) {
+			dish2 = 1;
+			wait_until_all_done("Tom", catnumber, 2, cat_wait_count[catnumber]); 
+			dish2 = 0;
+			
+			cat_wait_count[catnumber] = cat_wait_count[catnumber] + 1;
+		} else {
+			kprintf("\nStay out the kitchen Kitties!");
+		}
+		V(dish_mutex);
+	}
 }
-        
+
 
 /*
  * mousesem()
@@ -96,7 +219,6 @@ catsem(void * unusedpointer,
  *      Write and comment this function using semaphores.
  *
  */
-
 static
 void
 mousesem(void * unusedpointer, 
@@ -107,7 +229,27 @@ mousesem(void * unusedpointer,
          */
 
         (void) unusedpointer;
-        (void) mousenumber;
+
+        P(dish_mutex);
+	while (mice_wait_count[mousenumber] < 4) {
+		if (dish1 == 0 && dish2 != 2) {
+			dish1 = 1;
+			wait_until_all_done("Jerry", mousenumber, 1, mice_wait_count[mousenumber]); 
+			dish1 = 0;
+			
+			mice_wait_count[mousenumber] = cat_wait_count[mousenumber] + 1;
+		} else if (dish2 == 0 && dish1 != 2) {
+			dish2 = 1;
+			wait_until_all_done("Jerry", mousenumber, 2, mice_wait_count[mousenumber]); 
+			dish2 = 0;
+			
+			mice_wait_count[mousenumber] = mice_wait_count[mousenumber] + 1;
+		} else {
+			kprintf("\nNO MOUSE ALLOWED!");
+		}
+		V(dish_mutex);
+	}
+
 }
 
 
@@ -130,8 +272,10 @@ int
 catmousesem(int nargs,
             char ** args)
 {
-        int index, error;
-   
+	init();
+		
+        int index, error;   // index used to loop, error for just in case thread cannot be created
+
         /*
          * Avoid unused variable warnings.
          */
@@ -162,6 +306,7 @@ catmousesem(int nargs,
                               strerror(error)
                               );
                 }
+
         }
         
         /*
@@ -196,3 +341,16 @@ catmousesem(int nargs,
 /*
  * End of catsem.c
  */
+
+
+
+
+
+
+
+
+
+
+
+
+
diff --git a/kern/compile/ASST1/catsem.o b/kern/compile/ASST1/catsem.o
index b376e4e..cd572bc 100644
Binary files a/kern/compile/ASST1/catsem.o and b/kern/compile/ASST1/catsem.o differ
diff --git a/kern/compile/ASST1/depend.mk b/kern/compile/ASST1/depend.mk
index 3861979..59ba2f6 100644
--- a/kern/compile/ASST1/depend.mk
+++ b/kern/compile/ASST1/depend.mk
@@ -103,7 +103,8 @@ catlock.o: ../../asst1/catlock.c ../../include/types.h machine/types.h \
   ../../include/test.h ../../include/thread.h machine/pcb.h
 catsem.o: ../../asst1/catsem.c ../../include/types.h machine/types.h \
   ../../include/kern/types.h ../../include/lib.h machine/setjmp.h \
-  ../../include/test.h ../../include/thread.h machine/pcb.h
+  ../../include/synch.h ../../include/test.h ../../include/thread.h \
+  machine/pcb.h
 sfs_vnode.o: ../../fs/sfs/sfs_vnode.c ../../include/types.h \
   machine/types.h ../../include/kern/types.h ../../include/lib.h \
   machine/setjmp.h ../../include/synch.h ../../include/array.h \
diff --git a/kern/compile/ASST1/kernel b/kern/compile/ASST1/kernel
index e81448d..9158671 100755
Binary files a/kern/compile/ASST1/kernel and b/kern/compile/ASST1/kernel differ
diff --git a/kern/compile/ASST1/vers.c b/kern/compile/ASST1/vers.c
index 7f2a051..6e98f44 100644
--- a/kern/compile/ASST1/vers.c
+++ b/kern/compile/ASST1/vers.c
@@ -1,3 +1,3 @@
 /* This file is automatically generated. Edits will be lost.*/
-const int buildversion = 9;
+const int buildversion = 13;
 const char buildconfig[] = "ASST1";
diff --git a/kern/compile/ASST1/vers.o b/kern/compile/ASST1/vers.o
index 0eaf7e5..fec1db8 100644
Binary files a/kern/compile/ASST1/vers.o and b/kern/compile/ASST1/vers.o differ
diff --git a/kern/compile/ASST1/version b/kern/compile/ASST1/version
index ec63514..b1bd38b 100644
--- a/kern/compile/ASST1/version
+++ b/kern/compile/ASST1/version
@@ -1 +1 @@
-9
+13
